import { createFileRoute, useNavigate } from "@tanstack/react-router";

import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";

import { useForm } from "@tanstack/react-form";
import type { AnyFieldApi } from "@tanstack/react-form";

import { api } from "@/lib/api";

export const Route = createFileRoute("/_authenticated/create")({
    component: CreatePosts,
});

function FieldInfo({ field }: { field: AnyFieldApi }) {
    return (
        <>
            {field.state.meta.isTouched && !field.state.meta.isValid ? (
                <em>{field.state.meta.errors.join(", ")}</em>
            ) : null}
            {field.state.meta.isValidating ? "Validating..." : null}
        </>
    );
}

function CreatePosts() {
    const navigate = useNavigate();
    const form = useForm({
        defaultValues: {
            caption: "",
            picture: null as File | null,
        },
        onSubmit: async ({ value }) => {
            if (!value.picture) {
                throw new Error("You must have a valid image!");
            }

            const res = await api.posts.$post({
                form: {
                    caption: value.caption,
                    picture: value.picture,
                },
            });

            if (!res.ok) {
                throw new Error("server error");
            }

            navigate({ to: "/" });
        },
    });
    return (
        <div className="grid w-full max-w-sm items-center m-auto gap-2">
            <h1>Create a Post</h1>
            <form
                onSubmit={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    form.handleSubmit();
                }}
                className="flex flex-col gap-y-4"
            >
                <div>
                    <form.Field
                        name="caption"
                        validators={{
                            onChange: ({ value }) =>
                                !value
                                    ? "A caption is required"
                                    : value.length < 3
                                      ? "Caption must be at least 3 characters"
                                      : undefined,
                            onChangeAsyncDebounceMs: 500,
                            onChangeAsync: async ({ value }) => {
                                await new Promise((resolve) =>
                                    setTimeout(resolve, 1000)
                                );
                                return (
                                    value.includes("error") &&
                                    'No "error" allowed in first name'
                                );
                            },
                        }}
                        children={(field) => {
                            return (
                                <>
                                    <Label htmlFor={field.name}>Caption</Label>
                                    <Input
                                        type="caption"
                                        id={field.name}
                                        placeholder="Caption"
                                        value={field.state.value}
                                        onBlur={field.handleBlur}
                                        onChange={(e) => {
                                            field.handleChange(e.target.value);
                                        }}
                                    />

                                    <FieldInfo field={field} />
                                </>
                            );
                        }}
                    />
                </div>
                <div>
                    <form.Field
                        name="picture"
                        children={(field) => (
                            <>
                                <Label htmlFor={field.name}>Picture</Label>
                                <Input
                                    id={field.name}
                                    type="file"
                                    onBlur={field.handleBlur}
                                    onChange={(e) => {
                                        const file =
                                            e.target.files?.[0] ?? null;
                                        field.handleChange(file);
                                    }}
                                    accept="image/*"
                                />
                                <FieldInfo field={field} />
                            </>
                        )}
                    />
                </div>
                <form.Subscribe
                    selector={(state) => [state.canSubmit, state.isSubmitting]}
                    children={([canSubmit, isSubmitting]) => (
                        <Button type="submit" disabled={!canSubmit}>
                            {isSubmitting ? "..." : "Submit"}
                        </Button>
                    )}
                />
            </form>
        </div>
    );
}
